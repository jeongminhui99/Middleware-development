{"ast":null,"code":"import _slicedToArray from\"/Users/minhuijeong/Documents/Nodejs/OXGameServer/client_web/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _objectDestructuringEmpty from\"/Users/minhuijeong/Documents/Nodejs/OXGameServer/client_web/node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js\";import React,{Component,useState}from'react';import socket from\"../socket\";import User from\"./User\";import MessagePanel from\"./MessagePanel\";import\"./Chat.css\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Chat=function Chat(_ref){_objectDestructuringEmpty(_ref);var _useState=useState(null),_useState2=_slicedToArray(_useState,2),selectedUser=_useState2[0],setSelectedUser=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),users=_useState4[0],setUsers=_useState4[1];var getSelectUser=function getSelectUser(selectuser){setSelectedUser(selectuser);console.log(selectuser);};socket.on(\"connect\",function(){console.log(\"clientconnect\");users.forEach(function(user){if(user.self){user.connected=true;}});});socket.on(\"disconnect\",function(){users.forEach(function(user){if(user.self){user.connected=false;}});});var initReactiveProperties=function initReactiveProperties(user){user.connected=true;user.messages=[];user.hasNewMessages=false;};socket.on(\"users\",function(userss){userss.forEach(function(user){console.log(\"user : \",user);user.self=user.userID===socket.id;initReactiveProperties(user);});// put the current user first, and sort by username\nvar userstmp=[];userstmp=userss.sort(function(a,b){if(a.self)return-1;if(b.self)return 1;if(a.username<b.username)return-1;return a.username>b.username?1:0;});setUsers(userstmp);console.log(\"userstmp : \",userstmp[0]);});socket.on(\"user connected\",function(user){// initReactiveProperties(user);\n// users.push(user);\n});socket.on(\"user disconnected\",function(id){// for (let i = 0; i < users.length; i++) {\n//     const user = this.users[i];\n//     if (user.userID === id) {\n//         user.connected = false;\n//         break;\n//     }\n// }\n});socket.on(\"private message\",function(_ref2){// for (let i = 0; i < users.length; i++) {\n//     const user = users[i];\n//     if (user.userID === from) {\n//         user.messages.push({\n//             content,\n//             fromSelf: false,\n//         });\n//         if (user !== selectedUser) {\n//             user.hasNewMessages = true;\n//         }\n//         break;\n//     }\n// }\nvar content=_ref2.content,from=_ref2.from;});React.useEffect(function(){return function(){console.log(\"UNMOUNT\");socket.off(\"connect\");socket.off(\"disconnect\");socket.off(\"users\");socket.off(\"user connected\");socket.off(\"user disconnected\");socket.off(\"private message\");};},[]);var onMessage=function onMessage(content){if(selectedUser){socket.emit(\"private message\",{content:content,to:selectedUser.userID});selectedUser.messages.push({content:content,fromSelf:true});}};var onSelectUser=function onSelectUser(user){setSelectedUser(user);user.hasNewMessages=false;};return/*#__PURE__*/_jsxs(\"div\",{className:\"left-panel\",children:[users.map(function(user){return/*#__PURE__*/_jsx(User,{user:user,selected:selectedUser===user,getSelectUser:getSelectUser});}),/*#__PURE__*/_jsx(MessagePanel,{})]});};export default Chat;","map":{"version":3,"sources":["/Users/minhuijeong/Documents/Nodejs/OXGameServer/client_web/src/components/Chat.js"],"names":["React","Component","useState","socket","User","MessagePanel","Chat","selectedUser","setSelectedUser","users","setUsers","getSelectUser","selectuser","console","log","on","forEach","user","self","connected","initReactiveProperties","messages","hasNewMessages","userss","userID","id","userstmp","sort","a","b","username","content","from","useEffect","off","onMessage","emit","to","push","fromSelf","onSelectUser","map"],"mappings":"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","sourcesContent":["import React, { Component, useState } from 'react';\nimport socket from \"../socket\";\nimport User from \"./User\";\nimport MessagePanel from \"./MessagePanel\";\nimport \"./Chat.css\";\n\nconst Chat = ({}) => {\n    const [selectedUser, setSelectedUser] = useState(null);\n    const [users, setUsers] = useState([]);\n\n    const getSelectUser = (selectuser) => {\n        setSelectedUser(selectuser);\n        console.log(selectuser);\n    }\n\n    socket.on(\"connect\", () => {\n        console.log(\"clientconnect\");\n        users.forEach((user) => {\n            if (user.self) {\n                user.connected = true;\n            }\n        });\n    });\n  \n    socket.on(\"disconnect\", () => {\n        users.forEach((user) => {\n            if (user.self) {\n                user.connected = false;\n            }\n        });\n    });\n  \n    const initReactiveProperties = (user) => {\n        user.connected = true;\n        user.messages = [];\n        user.hasNewMessages = false;\n    };\n\n    socket.on(\"users\", (userss) => {\n        userss.forEach((user) => {\n            console.log(\"user : \", user);\n            user.self = user.userID === socket.id; \n            initReactiveProperties(user);\n        });\n        // put the current user first, and sort by username\n        var userstmp = []\n        userstmp = userss.sort((a, b) => {\n            if (a.self) return -1;\n            if (b.self) return 1;\n            if (a.username < b.username) return -1;\n            return a.username > b.username ? 1 : 0;\n        });\n        setUsers(userstmp);\n        console.log(\"userstmp : \", userstmp[0]);\n        \n    });\n  \n    socket.on(\"user connected\", (user) => {\n        // initReactiveProperties(user);\n        // users.push(user);\n    });\n  \n    socket.on(\"user disconnected\", (id) => {\n        // for (let i = 0; i < users.length; i++) {\n        //     const user = this.users[i];\n        //     if (user.userID === id) {\n        //         user.connected = false;\n        //         break;\n        //     }\n        // }\n    });\n\n    socket.on(\"private message\", ({ content, from }) => {\n        // for (let i = 0; i < users.length; i++) {\n        //     const user = users[i];\n        //     if (user.userID === from) {\n        //         user.messages.push({\n        //             content,\n        //             fromSelf: false,\n        //         });\n        //         if (user !== selectedUser) {\n        //             user.hasNewMessages = true;\n        //         }\n        //         break;\n        //     }\n        // }\n    });\n\n    React.useEffect(() => {\n        return () => {\n            console.log(\"UNMOUNT\")\n            socket.off(\"connect\");\n            socket.off(\"disconnect\");\n            socket.off(\"users\");\n            socket.off(\"user connected\");\n            socket.off(\"user disconnected\");\n            socket.off(\"private message\");\n        }\n    }, []);\n\n    const onMessage = (content) => {\n        if(selectedUser){\n            socket.emit(\"private message\", {\n                content,\n                to: selectedUser.userID,\n            });\n            selectedUser.messages.push({\n                content,\n                fromSelf: true,\n            });\n        }\n    }\n    const onSelectUser = (user) => {\n        setSelectedUser(user);\n        user.hasNewMessages = false;\n    }\n\n\n\n    return(\n        <div className=\"left-panel\">\n            {\n                users.map(user => (\n                    <User user={user} selected={selectedUser === user} getSelectUser={getSelectUser}/>\n                ))\n            }\n            <MessagePanel/>\n        </div>\n    );\n}\n\nexport default Chat;"]},"metadata":{},"sourceType":"module"}