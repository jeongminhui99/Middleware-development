{"ast":null,"code":"import _slicedToArray from\"/Users/minhuijeong/Documents/Nodejs/OXGameServer/client_web/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{Component,useEffect,useState}from'react';import\"./App.css\";import socket from\"./socket\";import SelectUsername from\"./components/SelectUsername\";import Chat from\"./components/Chat\";import{jsx as _jsx}from\"react/jsx-runtime\";export default function App(){//localStorage.clear();\nvar _useState=useState(''),_useState2=_slicedToArray(_useState,2),username=_useState2[0],setUsername=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),usernameAlreadySelected=_useState4[0],setUsernameAlreadySelected=_useState4[1];var _useState5=useState(localStorage.getItem(\"sessionID\")),_useState6=_slicedToArray(_useState5,2),sessionID=_useState6[0],setSessionID=_useState6[1];//const sessionID = localStorage.getItem(\"sessionID\");\nvar getData=function getData(username){//onUsernameSelection\nsetUsername(username);console.log(username);setUsernameAlreadySelected(true);socket.auth={username:username};socket.connect();};if(sessionID){setUsernameAlreadySelected(true);socket.auth={sessionID:sessionID};socket.connect();};// useEffect(() => {\n//     socket.on(\"session\", ({ sessionID, userID }) => {\n//         console.log(\"session\");\n//         // attach the session ID to the next reconnection attempts\n//         socket.auth = { sessionID };\n//         // store it in the localStorage\n//         localStorage.setItem(\"sessionID\", sessionID);\n//         // save the ID of the user\n//         socket.userID = userID;\n//     });\n// }, []);\nsocket.on(\"session\",function(_ref){var sessionID=_ref.sessionID,userID=_ref.userID;console.log(\"session\");// attach the session ID to the next reconnection attempts\nsocket.auth={sessionID:sessionID};// store it in the localStorage\nlocalStorage.setItem(\"sessionID\",sessionID);setSessionID(sessionID);// save the ID of the user\nsocket.userID=userID;});socket.on(\"connect_error\",function(err){if(err.message===\"invalid username\"){setUsernameAlreadySelected(false);}});useEffect(function(){return function(){console.log(\"UNMOUNT\");socket.off(\"connect_error\");};},[]);// useEffect(()=>{\n//     socket.on(\"connect_error\", (err) => {\n//         if (err.message === \"invalid username\") {\n//         this.usernameAlreadySelected = false;\n//         }\n//     });\n// })\nreturn/*#__PURE__*/_jsx(\"div\",{id:\"app\",children:!usernameAlreadySelected?/*#__PURE__*/_jsx(SelectUsername,{username:username,getData:getData}):/*#__PURE__*/_jsx(Chat,{})});}","map":{"version":3,"sources":["/Users/minhuijeong/Documents/Nodejs/OXGameServer/client_web/src/App.js"],"names":["React","Component","useEffect","useState","socket","SelectUsername","Chat","App","username","setUsername","usernameAlreadySelected","setUsernameAlreadySelected","localStorage","getItem","sessionID","setSessionID","getData","console","log","auth","connect","on","userID","setItem","err","message","off"],"mappings":"iJAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,SAA3B,CAAsCC,QAAtC,KAAsD,OAAtD,CACA,MAAO,WAAP,CACA,MAAOC,CAAAA,MAAP,KAAmB,UAAnB,CACA,MAAOC,CAAAA,cAAP,KAA2B,6BAA3B,CACA,MAAOC,CAAAA,IAAP,KAAiB,mBAAjB,C,2CAEA,cAAe,SAASC,CAAAA,GAAT,EAAe,CAC1B;AACA,cAAgCJ,QAAQ,CAAC,EAAD,CAAxC,wCAAOK,QAAP,eAAiBC,WAAjB,eACA,eAA8DN,QAAQ,CAAC,KAAD,CAAtE,yCAAOO,uBAAP,eAAgCC,0BAAhC,eACA,eAAkCR,QAAQ,CAACS,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAD,CAA1C,yCAAOC,SAAP,eAAkBC,YAAlB,eACA;AAGA,GAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAACR,QAAD,CAAc,CAAE;AAC5BC,WAAW,CAACD,QAAD,CAAX,CACAS,OAAO,CAACC,GAAR,CAAYV,QAAZ,EACAG,0BAA0B,CAAC,IAAD,CAA1B,CACAP,MAAM,CAACe,IAAP,CAAc,CAAEX,QAAQ,CAARA,QAAF,CAAd,CACAJ,MAAM,CAACgB,OAAP,GACH,CAND,CASA,GAAIN,SAAJ,CAAe,CACXH,0BAA0B,CAAC,IAAD,CAA1B,CACAP,MAAM,CAACe,IAAP,CAAc,CAAEL,SAAS,CAATA,SAAF,CAAd,CACAV,MAAM,CAACgB,OAAP,GACH,EAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAhB,MAAM,CAACiB,EAAP,CAAU,SAAV,CAAqB,cAA2B,IAAxBP,CAAAA,SAAwB,MAAxBA,SAAwB,CAAbQ,MAAa,MAAbA,MAAa,CAC5CL,OAAO,CAACC,GAAR,CAAY,SAAZ,EACA;AACAd,MAAM,CAACe,IAAP,CAAc,CAAEL,SAAS,CAATA,SAAF,CAAd,CACA;AACAF,YAAY,CAACW,OAAb,CAAqB,WAArB,CAAkCT,SAAlC,EACAC,YAAY,CAACD,SAAD,CAAZ,CACA;AACAV,MAAM,CAACkB,MAAP,CAAgBA,MAAhB,CACH,CATD,EAWAlB,MAAM,CAACiB,EAAP,CAAU,eAAV,CAA2B,SAACG,GAAD,CAAS,CAChC,GAAIA,GAAG,CAACC,OAAJ,GAAgB,kBAApB,CAAwC,CACpCd,0BAA0B,CAAC,KAAD,CAA1B,CACH,CACJ,CAJD,EAMAT,SAAS,CAAC,UAAM,CACZ,MAAO,WAAM,CACTe,OAAO,CAACC,GAAR,CAAY,SAAZ,EACAd,MAAM,CAACsB,GAAP,CAAW,eAAX,EACH,CAHD,CAIH,CALQ,CAKN,EALM,CAAT,CAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA,mBACI,YAAK,EAAE,CAAC,KAAR,UACK,CAAChB,uBAAD,cAA0B,KAAC,cAAD,EAAgB,QAAQ,CAAEF,QAA1B,CAAoC,OAAO,CAAEQ,OAA7C,EAA1B,cAAoF,KAAC,IAAD,IADzF,EADJ,CAMH","sourcesContent":["import React, { Component, useEffect, useState } from 'react';\nimport \"./App.css\";\nimport socket from \"./socket\";\nimport SelectUsername from \"./components/SelectUsername\";\nimport Chat from \"./components/Chat\";\n\nexport default function App() {\n    //localStorage.clear();\n    const [username, setUsername] = useState('');\n    const [usernameAlreadySelected, setUsernameAlreadySelected] = useState(false);\n    const [sessionID, setSessionID] = useState(localStorage.getItem(\"sessionID\"));\n    //const sessionID = localStorage.getItem(\"sessionID\");\n\n\n    const getData = (username) => { //onUsernameSelection\n        setUsername(username);\n        console.log(username);\n        setUsernameAlreadySelected(true);\n        socket.auth = { username };\n        socket.connect();\n    };\n\n\n    if (sessionID) {\n        setUsernameAlreadySelected(true);\n        socket.auth = { sessionID };\n        socket.connect();\n    };\n\n    // useEffect(() => {\n    //     socket.on(\"session\", ({ sessionID, userID }) => {\n    //         console.log(\"session\");\n    //         // attach the session ID to the next reconnection attempts\n    //         socket.auth = { sessionID };\n    //         // store it in the localStorage\n    //         localStorage.setItem(\"sessionID\", sessionID);\n    //         // save the ID of the user\n    //         socket.userID = userID;\n    //     });\n    // }, []);\n    \n    socket.on(\"session\", ({ sessionID, userID }) => {\n        console.log(\"session\");\n        // attach the session ID to the next reconnection attempts\n        socket.auth = { sessionID };\n        // store it in the localStorage\n        localStorage.setItem(\"sessionID\", sessionID);\n        setSessionID(sessionID);\n        // save the ID of the user\n        socket.userID = userID;\n    });\n\n    socket.on(\"connect_error\", (err) => {\n        if (err.message === \"invalid username\") {\n            setUsernameAlreadySelected(false);\n        }\n    });\n\n    useEffect(() => {\n        return () => {\n            console.log(\"UNMOUNT\")\n            socket.off(\"connect_error\");\n        }\n    }, []);\n\n    // useEffect(()=>{\n\n    //     socket.on(\"connect_error\", (err) => {\n    //         if (err.message === \"invalid username\") {\n    //         this.usernameAlreadySelected = false;\n    //         }\n    //     });\n    // })\n\n    return(\n        <div id=\"app\">\n            {!usernameAlreadySelected? <SelectUsername username={username} getData={getData}/> : <Chat/> }\n        </div> \n\n    );\n}\n"]},"metadata":{},"sourceType":"module"}