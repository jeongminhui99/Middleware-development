{"ast":null,"code":"import _objectSpread from\"/Users/minhuijeong/Documents/Nodejs/OXGameServer/client_web/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _slicedToArray from\"/Users/minhuijeong/Documents/Nodejs/OXGameServer/client_web/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{Component,useEffect,useState}from'react';import socket from\"../socket\";import User from\"./User\";import MessagePanel from\"./MessagePanel\";import\"./Chat.scoped.css\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Chat=function Chat(){var _useState=useState(null),_useState2=_slicedToArray(_useState,2),selectedUser=_useState2[0],setSelectedUser=_useState2[1];//const [selectedm, setSelectedm] = useState({id:\"fff\", ff:[{d:\"ddd\"}]});\nvar _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),users=_useState4[0],setUsers=_useState4[1];socket.on(\"connect\",function(){console.log(\"clientconnect\");users.forEach(function(user){if(user.self){user.connected=true;}});});socket.on(\"disconnect\",function(){users.forEach(function(user){if(user.self){user.connected=false;}});});socket.on(\"users\",function(userss){userss.forEach(function(user){console.log(\"user : \",user);user.self=user.userID===socket.id;initReactiveProperties(user);});// put the current user first, and sort by username\nvar userstmp=[];userstmp=userss.sort(function(a,b){if(a.self)return-1;if(b.self)return 1;if(a.username<b.username)return-1;return a.username>b.username?1:0;});setUsers(userstmp);console.log(\"userstmp : \",userstmp);});socket.on(\"user connected\",function(user){initReactiveProperties(user);setUsers(users.concat(user));console.log(\"user connected : \",users);//users.push(user);\n});socket.on(\"user disconnected\",function(id){for(var i=0;i<users.length;i++){var user=users[i];if(user.userID===id){user.connected=false;setUsers(users);break;}}});useEffect(function(){socket.on(\"private message\",function(_ref){var content=_ref.content,from=_ref.from;//console.log(\"pppp\");\nfor(var i=0;i<users.length;i++){var user=users[i];if(user.userID===from){console.log(\"content\",content,_objectSpread(_objectSpread({},user),{},{messages:user.messages.concat({content:content,fromSelf:false})}));user.messages.push({content:content,fromSelf:false});if(user!==selectedUser){user.hasNewMessages=true;}break;}}//setUsers(users);\nconsole.log(users);console.log(selectedUser);});return function(){console.log(\"UNMOUNT\");socket.off(\"private message\");};});// useEffect(() => {\n//     return () => {\n//         console.log(\"UNMOUNT\")\n//         socket.off(\"connect\");\n//         socket.off(\"disconnect\");\n//         socket.off(\"users\");\n//         socket.off(\"user connected\");\n//         socket.off(\"user disconnected\");\n//         socket.off(\"private message\");\n//     }\n// }, []);\nvar initReactiveProperties=function initReactiveProperties(user){user.connected=true;user.messages=[];user.hasNewMessages=false;};var getSelectUser=function getSelectUser(selectuser){setSelectedUser(selectuser);selectuser.hasNewMessages=false;console.log(\"selectuser : \",selectuser);};var onMessage=function onMessage(content){console.log(\"onMessage : \",content,users,selectedUser);if(selectedUser){//console.log(\"selectedUser : \", selectedUser);\nsocket.emit(\"private message\",{content:content,to:selectedUser.userID});console.log(selectedUser.messages.concat({content:content,fromSelf:true}));selectedUser.messages.push({content:content,fromSelf:true});// var test = selectedUser.messages.concat({\n//     content,\n//     fromSelf: true,\n// });\n// setSelectedUser((selectedUser)=>{\n//     return { ...selectedUser, messages: test}\n// });\n// var test2 = selectedm.ff.concat({d:\"fff\"});\n// setSelectedm({id:selectedm.id, ff:test2});\n// setSelectedUser({userID: selectedUser.userID, username: selectedUser.username, self: selectedUser.self,\n// connected: selectedUser.connected, hasNewMessages: selectedUser.hasNewMessages, messages: test});\n}};// const onSelectUser = (user) => {\n//     setSelectedUser(user);\n//     user.hasNewMessages = false;\n// }\nreturn/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"div\",{className:\"left-panel\",children:users.map(function(user){return/*#__PURE__*/_jsx(User,{user:user,selected:selectedUser===user,getSelectUser:getSelectUser},user.userID);})}),/*#__PURE__*/_jsx(\"div\",{className:\"right-panel\",children:selectedUser?/*#__PURE__*/_jsx(MessagePanel,{user:selectedUser,onMessage:onMessage,className:\"right-panel\"}):null})]});};export default Chat;","map":{"version":3,"sources":["/Users/minhuijeong/Documents/Nodejs/OXGameServer/client_web/src/components/Chat.js"],"names":["React","Component","useEffect","useState","socket","User","MessagePanel","Chat","selectedUser","setSelectedUser","users","setUsers","on","console","log","forEach","user","self","connected","userss","userID","id","initReactiveProperties","userstmp","sort","a","b","username","concat","i","length","content","from","messages","fromSelf","push","hasNewMessages","off","getSelectUser","selectuser","onMessage","emit","to","map"],"mappings":"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","sourcesContent":["import React, { Component, useEffect, useState } from 'react';\nimport socket from \"../socket\";\nimport User from \"./User\";\nimport MessagePanel from \"./MessagePanel\";\nimport \"./Chat.scoped.css\";\n\nconst Chat = () => {\n    const [selectedUser, setSelectedUser] = useState(null);\n    //const [selectedm, setSelectedm] = useState({id:\"fff\", ff:[{d:\"ddd\"}]});\n    const [users, setUsers] = useState([]);\n\n\n    socket.on(\"connect\", () => {\n        console.log(\"clientconnect\");\n        users.forEach((user) => {\n            if (user.self) {\n                user.connected = true;\n            }\n        });\n    });\n      \n    socket.on(\"disconnect\", () => {\n        users.forEach((user) => {\n            if (user.self) {\n                user.connected = false;\n            }\n        });\n    });\n\n    socket.on(\"users\", (userss) => {\n        userss.forEach((user) => {\n            console.log(\"user : \", user);\n            user.self = user.userID === socket.id; \n            initReactiveProperties(user);\n        });\n        // put the current user first, and sort by username\n        var userstmp = []\n        userstmp = userss.sort((a, b) => {\n            if (a.self) return -1;\n            if (b.self) return 1;\n            if (a.username < b.username) return -1;\n            return a.username > b.username ? 1 : 0;\n        });\n        setUsers(userstmp);\n        console.log(\"userstmp : \", userstmp);\n        \n    });\n\n    socket.on(\"user connected\", (user) => {\n        initReactiveProperties(user);\n        setUsers(users.concat(user));\n        console.log(\"user connected : \", users);\n        //users.push(user);\n    });\n  \n    socket.on(\"user disconnected\", (id) => {\n        for (let i = 0; i < users.length; i++) {\n            const user = users[i];\n            if (user.userID === id) {\n                user.connected = false;\n                setUsers(users);\n                break;\n            }\n        }\n    });\n\n    useEffect(()=> {\n        socket.on(\"private message\", ({ content, from }) => {\n            //console.log(\"pppp\");\n            for (let i = 0; i < users.length; i++) {\n                const user = users[i];\n                if (user.userID === from) {\n                    console.log(\"content\", content, { ...user, messages: user.messages.concat({\n                        content, \n                        fromSelf: false,\n                    })});        \n                    user.messages.push({\n                        content,\n                        fromSelf: false,\n                    });\n                    if (user !== selectedUser) {\n                        user.hasNewMessages = true;\n                    }\n                    break;\n                }\n            }\n            //setUsers(users);\n            console.log(users);\n            console.log(selectedUser);\n        });\n        return () => {\n            console.log(\"UNMOUNT\")\n            socket.off(\"private message\");\n        }\n    });\n\n\n    // useEffect(() => {\n    //     return () => {\n    //         console.log(\"UNMOUNT\")\n    //         socket.off(\"connect\");\n    //         socket.off(\"disconnect\");\n    //         socket.off(\"users\");\n    //         socket.off(\"user connected\");\n    //         socket.off(\"user disconnected\");\n    //         socket.off(\"private message\");\n    //     }\n    // }, []);\n  \n    const initReactiveProperties = (user) => {\n        user.connected = true;\n        user.messages = [];\n        user.hasNewMessages = false;\n    };\n\n    const getSelectUser = (selectuser) => {\n        setSelectedUser(selectuser);\n        selectuser.hasNewMessages = false;\n        console.log(\"selectuser : \", selectuser);\n    }\n\n    const onMessage = (content) => {\n        console.log(\"onMessage : \", content, users, selectedUser);\n        if(selectedUser){\n            //console.log(\"selectedUser : \", selectedUser);\n            socket.emit(\"private message\", {\n                content,\n                to: selectedUser.userID,\n            });\n\n            console.log(selectedUser.messages.concat({\n                content,\n                fromSelf: true,\n            }));\n\n            selectedUser.messages.push({\n                content,\n                fromSelf: true,\n            });\n            // var test = selectedUser.messages.concat({\n            //     content,\n            //     fromSelf: true,\n            // });\n            // setSelectedUser((selectedUser)=>{\n            //     return { ...selectedUser, messages: test}\n            // });\n            // var test2 = selectedm.ff.concat({d:\"fff\"});\n            // setSelectedm({id:selectedm.id, ff:test2});\n            // setSelectedUser({userID: selectedUser.userID, username: selectedUser.username, self: selectedUser.self,\n            // connected: selectedUser.connected, hasNewMessages: selectedUser.hasNewMessages, messages: test});\n        }\n    }\n    // const onSelectUser = (user) => {\n    //     setSelectedUser(user);\n    //     user.hasNewMessages = false;\n    // }\n\n    return(\n        <div>\n            <div className=\"left-panel\">\n                {\n                    users.map(user => (\n                        <User user={user} key={user.userID} selected={selectedUser === user} getSelectUser={getSelectUser}/>\n                    ))\n                }\n                {/* {selectedm? <div>{ selectedm.ff && selectedm.ff.map((m)=>(<div>{m.d}</div>))}</div>: null} */}\n            </div>\n            <div className=\"right-panel\">\n            \n                {\n                    selectedUser?\n                    <MessagePanel user = {selectedUser} onMessage = {onMessage} className=\"right-panel\"/> : null\n                }\n\n            </div>\n        </div>\n    );\n}\n\nexport default Chat;"]},"metadata":{},"sourceType":"module"}