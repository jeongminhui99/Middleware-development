{"ast":null,"code":"import _slicedToArray from\"/Users/minhuijeong/Documents/Nodejs/OXGameServer/client_web/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{Component,useEffect,useState}from'react';import socket from\"../socket\";import User from\"./User\";import MessagePanel from\"./MessagePanel\";import\"./Chat.scoped.css\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Chat=function Chat(){var _useState=useState(null),_useState2=_slicedToArray(_useState,2),selectedUser=_useState2[0],setSelectedUser=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),users=_useState4[0],setUsers=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),ismsg=_useState6[0],setIsmsg=_useState6[1];var getSelectUser=function getSelectUser(selectuser){setSelectedUser(selectuser);selectuser.hasNewMessages=false;console.log(\"selectuser : \",selectuser);};socket.on(\"connect\",function(){console.log(\"clientconnect\");users.forEach(function(user){if(user.self){user.connected=true;}});});socket.on(\"disconnect\",function(){users.forEach(function(user){if(user.self){user.connected=false;}});});socket.on(\"users\",function(userss){userss.forEach(function(user){console.log(\"user : \",user);user.self=user.userID===socket.id;initReactiveProperties(user);});// put the current user first, and sort by username\nvar userstmp=[];userstmp=userss.sort(function(a,b){if(a.self)return-1;if(b.self)return 1;if(a.username<b.username)return-1;return a.username>b.username?1:0;});setUsers(userstmp);console.log(\"userstmp : \",userstmp);});socket.on(\"user connected\",function(user){initReactiveProperties(user);setUsers(users.concat(user));console.log(\"user connected : \",users);//users.push(user);\n});socket.on(\"user disconnected\",function(id){for(var i=0;i<users.length;i++){var user=users[i];if(user.userID===id){user.connected=false;setUsers(users);break;}}});useEffect(function(){socket.on(\"private message\",function(_ref){var content=_ref.content,from=_ref.from;for(var i=0;i<users.length;i++){var user=users[i];if(user.userID===from){console.log(\"content\",content);user.messages.push({content:content,fromSelf:false});if(user!==selectedUser){user.hasNewMessages=true;}//setUsers(users);\nbreak;}}});},[ismsg]);// useEffect(() => {\n//     return () => {\n//         console.log(\"UNMOUNT\")\n//         socket.off(\"connect\");\n//         socket.off(\"disconnect\");\n//         socket.off(\"users\");\n//         socket.off(\"user connected\");\n//         socket.off(\"user disconnected\");\n//         socket.off(\"private message\");\n//     }\n// }, []);\nvar initReactiveProperties=function initReactiveProperties(user){user.connected=true;user.messages=[];user.hasNewMessages=false;};var onMessage=function onMessage(content){//console.log(\"content : \", content);\nif(selectedUser){//console.log(\"selectedUser : \", selectedUser);\nif(ismsg===false){setIsmsg(true);}else{setIsmsg(false);}socket.emit(\"private message\",{content:content,to:selectedUser.userID});selectedUser.messages.push({content:content,fromSelf:true});}};// const onSelectUser = (user) => {\n//     setSelectedUser(user);\n//     user.hasNewMessages = false;\n// }\nreturn/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"div\",{className:\"left-panel\",children:users.map(function(user){return/*#__PURE__*/_jsx(User,{user:user,selected:selectedUser===user,getSelectUser:getSelectUser});})}),/*#__PURE__*/_jsx(\"div\",{className:\"right-panel\",children:selectedUser?/*#__PURE__*/_jsx(MessagePanel,{user:selectedUser,onMessage:onMessage,className:\"right-panel\"}):null})]});};export default Chat;","map":{"version":3,"sources":["/Users/minhuijeong/Documents/Nodejs/OXGameServer/client_web/src/components/Chat.js"],"names":["React","Component","useEffect","useState","socket","User","MessagePanel","Chat","selectedUser","setSelectedUser","users","setUsers","ismsg","setIsmsg","getSelectUser","selectuser","hasNewMessages","console","log","on","forEach","user","self","connected","userss","userID","id","initReactiveProperties","userstmp","sort","a","b","username","concat","i","length","content","from","messages","push","fromSelf","onMessage","emit","to","map"],"mappings":"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","sourcesContent":["import React, { Component, useEffect, useState } from 'react';\nimport socket from \"../socket\";\nimport User from \"./User\";\nimport MessagePanel from \"./MessagePanel\";\nimport \"./Chat.scoped.css\";\n\nconst Chat = () => {\n    const [selectedUser, setSelectedUser] = useState(null);\n    const [users, setUsers] = useState([]);\n    const [ismsg, setIsmsg] = useState(false);\n\n    const getSelectUser = (selectuser) => {\n        setSelectedUser(selectuser);\n        selectuser.hasNewMessages = false;\n        console.log(\"selectuser : \", selectuser);\n    }\n\n    socket.on(\"connect\", () => {\n        console.log(\"clientconnect\");\n        users.forEach((user) => {\n            if (user.self) {\n                user.connected = true;\n            }\n        });\n    });\n      \n    socket.on(\"disconnect\", () => {\n        users.forEach((user) => {\n            if (user.self) {\n                user.connected = false;\n            }\n        });\n    });\n\n    socket.on(\"users\", (userss) => {\n        userss.forEach((user) => {\n            console.log(\"user : \", user);\n            user.self = user.userID === socket.id; \n            initReactiveProperties(user);\n        });\n        // put the current user first, and sort by username\n        var userstmp = []\n        userstmp = userss.sort((a, b) => {\n            if (a.self) return -1;\n            if (b.self) return 1;\n            if (a.username < b.username) return -1;\n            return a.username > b.username ? 1 : 0;\n        });\n        setUsers(userstmp);\n        console.log(\"userstmp : \", userstmp);\n        \n    });\n\n    socket.on(\"user connected\", (user) => {\n        initReactiveProperties(user);\n        setUsers(users.concat(user));\n        console.log(\"user connected : \", users);\n        //users.push(user);\n    });\n  \n    socket.on(\"user disconnected\", (id) => {\n        for (let i = 0; i < users.length; i++) {\n            const user = users[i];\n            if (user.userID === id) {\n                user.connected = false;\n                setUsers(users);\n                break;\n            }\n        }\n    });\n\n    useEffect(()=> {\n        socket.on(\"private message\", ({ content, from }) => {\n            for (let i = 0; i < users.length; i++) {\n                const user = users[i];\n                if (user.userID === from) {\n                    console.log(\"content\", content);        \n                    user.messages.push({\n                        content,\n                        fromSelf: false,\n                    });\n                    if (user !== selectedUser) {\n                        user.hasNewMessages = true;\n                    }\n                    //setUsers(users);\n                    break;\n                }\n            }\n            \n        });\n    }, [ismsg]);\n\n\n\n    // useEffect(() => {\n    //     return () => {\n    //         console.log(\"UNMOUNT\")\n    //         socket.off(\"connect\");\n    //         socket.off(\"disconnect\");\n    //         socket.off(\"users\");\n    //         socket.off(\"user connected\");\n    //         socket.off(\"user disconnected\");\n    //         socket.off(\"private message\");\n    //     }\n    // }, []);\n\n\n  \n    const initReactiveProperties = (user) => {\n        user.connected = true;\n        user.messages = [];\n        user.hasNewMessages = false;\n    };\n\n    const onMessage = (content) => {\n        //console.log(\"content : \", content);\n        if(selectedUser){\n            //console.log(\"selectedUser : \", selectedUser);\n            if(ismsg === false){\n                setIsmsg(true);\n            } else {\n                setIsmsg(false);\n            }\n            socket.emit(\"private message\", {\n                content,\n                to: selectedUser.userID,\n            });\n            selectedUser.messages.push({\n                content,\n                fromSelf: true,\n            });\n        }\n    }\n    // const onSelectUser = (user) => {\n    //     setSelectedUser(user);\n    //     user.hasNewMessages = false;\n    // }\n\n    return(\n        <div>\n            <div className=\"left-panel\">\n                {\n                    users.map(user => (\n                        <User user={user} selected={selectedUser === user} getSelectUser={getSelectUser}/>\n                    ))\n                }\n            </div>\n            <div className=\"right-panel\">\n                {\n                    selectedUser?\n                    <MessagePanel \n                        user = {selectedUser}\n                        onMessage = {onMessage}\n                        className=\"right-panel\"\n                    /> : null\n                }\n\n            </div>\n        </div>\n    );\n}\n\nexport default Chat;"]},"metadata":{},"sourceType":"module"}