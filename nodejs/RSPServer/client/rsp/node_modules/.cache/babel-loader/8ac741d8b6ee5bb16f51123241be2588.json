{"ast":null,"code":"import _slicedToArray from\"/Users/minhuijeong/Documents/Nodejs/RSPServer/client/rsp/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import logo from'./logo.svg';import React,{Component,useState,useEffect}from'react';import Username from\"./components/Username\";import Room from\"./components/Room\";import socket from\"./socket\";import'./App.css';import{jsx as _jsx}from\"react/jsx-runtime\";function App(){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),nicknameAlreadySelected=_useState2[0],setNicknameAlreadySelected=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),nickname=_useState4[0],setNickname=_useState4[1];var sessionID=localStorage.getItem(\"sessionID\");var getNickname=function getNickname(username){setNickname(username);console.log(\"nickname : \",username);setNicknameAlreadySelected(true);socket.auth={username:username};socket.connect();};if(sessionID){// 이거 안하면 서버 재실행 할 때마다 session이 새로 생성됨\nconsole.log(\"App.js: sessionID 있음\");if(nicknameAlreadySelected===false){setNicknameAlreadySelected(true);}socket.auth={sessionID:sessionID};socket.connect();}socket.on(\"session\",function(_ref){var sessionID=_ref.sessionID,userID=_ref.userID;console.log(\"서버로부터 session: \",sessionID);// attach the session ID to the next reconnection attempts\nsocket.auth={sessionID:sessionID};// store it in the localStorage\nlocalStorage.setItem(\"sessionID\",sessionID);// save the ID of the user\nsocket.userID=userID;});socket.on(\"connect_error\",function(err){// 이 코드 없으면 새로운 세션이 계속 생성된다.\nif(err.message===\"invalid username\"){setNicknameAlreadySelected(false);}});useEffect(function(){return function(){console.log(\"UNMOUNT\");socket.off(\"connect_error\");};},[]);return/*#__PURE__*/_jsx(\"div\",{className:\"App\",children:!nicknameAlreadySelected?/*#__PURE__*/_jsx(Username,{getNickname:getNickname}):/*#__PURE__*/_jsx(Room,{setNicknameAlreadySelected:setNicknameAlreadySelected,value:nickname})});}export default App;","map":{"version":3,"sources":["/Users/minhuijeong/Documents/Nodejs/RSPServer/client/rsp/src/App.js"],"names":["logo","React","Component","useState","useEffect","Username","Room","socket","App","nicknameAlreadySelected","setNicknameAlreadySelected","nickname","setNickname","sessionID","localStorage","getItem","getNickname","username","console","log","auth","connect","on","userID","setItem","err","message","off"],"mappings":"8IAAA,MAAOA,CAAAA,IAAP,KAAiB,YAAjB,CACA,MAAOC,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,CAAqCC,SAArC,KAAsD,OAAtD,CACA,MAAOC,CAAAA,QAAP,KAAqB,uBAArB,CACA,MAAOC,CAAAA,IAAP,KAAiB,mBAAjB,CACA,MAAOC,CAAAA,MAAP,KAAmB,UAAnB,CACA,MAAO,WAAP,C,2CAEA,QAASC,CAAAA,GAAT,EAAe,CAEb,cAA8DL,QAAQ,CAAC,KAAD,CAAtE,wCAAOM,uBAAP,eAAgCC,0BAAhC,eACA,eAAgCP,QAAQ,CAAC,EAAD,CAAxC,yCAAOQ,QAAP,eAAiBC,WAAjB,eACA,GAAMC,CAAAA,SAAS,CAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAlB,CAEA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,QAAD,CAAc,CAChCL,WAAW,CAACK,QAAD,CAAX,CACAC,OAAO,CAACC,GAAR,CAAY,aAAZ,CAA2BF,QAA3B,EACAP,0BAA0B,CAAC,IAAD,CAA1B,CACAH,MAAM,CAACa,IAAP,CAAc,CAAEH,QAAQ,CAARA,QAAF,CAAd,CACAV,MAAM,CAACc,OAAP,GACD,CAND,CAQA,GAAGR,SAAH,CAAa,CAAE;AACbK,OAAO,CAACC,GAAR,CAAY,sBAAZ,EACA,GAAGV,uBAAuB,GAAK,KAA/B,CAAqC,CACnCC,0BAA0B,CAAC,IAAD,CAA1B,CACD,CACDH,MAAM,CAACa,IAAP,CAAc,CAAEP,SAAS,CAATA,SAAF,CAAd,CACAN,MAAM,CAACc,OAAP,GACD,CAEDd,MAAM,CAACe,EAAP,CAAU,SAAV,CAAqB,cAA2B,IAAxBT,CAAAA,SAAwB,MAAxBA,SAAwB,CAAbU,MAAa,MAAbA,MAAa,CAC9CL,OAAO,CAACC,GAAR,CAAY,iBAAZ,CAA+BN,SAA/B,EACA;AACAN,MAAM,CAACa,IAAP,CAAc,CAAEP,SAAS,CAATA,SAAF,CAAd,CACA;AACAC,YAAY,CAACU,OAAb,CAAqB,WAArB,CAAkCX,SAAlC,EACA;AACAN,MAAM,CAACgB,MAAP,CAAgBA,MAAhB,CACD,CARD,EAUAhB,MAAM,CAACe,EAAP,CAAU,eAAV,CAA2B,SAACG,GAAD,CAAS,CAAE;AACpC,GAAIA,GAAG,CAACC,OAAJ,GAAgB,kBAApB,CAAwC,CACpChB,0BAA0B,CAAC,KAAD,CAA1B,CACH,CACF,CAJD,EAMAN,SAAS,CAAC,UAAM,CACd,MAAO,WAAM,CACTc,OAAO,CAACC,GAAR,CAAY,SAAZ,EACAZ,MAAM,CAACoB,GAAP,CAAW,eAAX,EACH,CAHD,CAID,CALQ,CAKN,EALM,CAAT,CAOA,mBACE,YAAK,SAAS,CAAC,KAAf,UACI,CAAClB,uBAAD,cAA0B,KAAC,QAAD,EAAU,WAAW,CAAEO,WAAvB,EAA1B,cAAkE,KAAC,IAAD,EAAM,0BAA0B,CAAEN,0BAAlC,CAA8D,KAAK,CAAEC,QAArE,EADtE,EADF,CAKD,CAED,cAAeH,CAAAA,GAAf","sourcesContent":["import logo from './logo.svg';\nimport React, { Component, useState, useEffect } from 'react';\nimport Username from \"./components/Username\";\nimport Room from \"./components/Room\";\nimport socket from \"./socket\";\nimport './App.css';\n\nfunction App() {\n\n  const [nicknameAlreadySelected, setNicknameAlreadySelected] = useState(false);\n  const [nickname, setNickname] = useState(\"\");\n  const sessionID = localStorage.getItem(\"sessionID\");\n\n  const getNickname = (username) => {\n    setNickname(username);\n    console.log(\"nickname : \", username);\n    setNicknameAlreadySelected(true);\n    socket.auth = { username };\n    socket.connect();\n  };\n\n  if(sessionID){ // 이거 안하면 서버 재실행 할 때마다 session이 새로 생성됨\n    console.log(\"App.js: sessionID 있음\");\n    if(nicknameAlreadySelected === false){\n      setNicknameAlreadySelected(true);\n    }\n    socket.auth = { sessionID };\n    socket.connect();\n  }\n\n  socket.on(\"session\", ({ sessionID, userID }) => {\n    console.log(\"서버로부터 session: \", sessionID);\n    // attach the session ID to the next reconnection attempts\n    socket.auth = { sessionID };\n    // store it in the localStorage\n    localStorage.setItem(\"sessionID\", sessionID);\n    // save the ID of the user\n    socket.userID = userID;\n  });\n\n  socket.on(\"connect_error\", (err) => { // 이 코드 없으면 새로운 세션이 계속 생성된다.\n    if (err.message === \"invalid username\") {\n        setNicknameAlreadySelected(false);\n    }\n  });\n\n  useEffect(() => {\n    return () => {\n        console.log(\"UNMOUNT\")\n        socket.off(\"connect_error\");\n    }\n  }, []);\n\n  return (\n    <div className=\"App\">\n      { !nicknameAlreadySelected? <Username getNickname={getNickname}/> : <Room setNicknameAlreadySelected={setNicknameAlreadySelected} value={nickname}/>}\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}